class Solution {
public:
    // 对于这个题目，它规定了从0开始报数，所以begin恒==0
    int ysfh(int n,int m,int begin){
        if(n==1){
            return begin;
        }
        return (ysfh(n-1,m,0)+m)%n;
    }
    int LastRemaining_Solution(int n, int m){
        if(n<=0 || m<=0){
            return -1;
        }

        return  ysfh(n,m,0);
    }
};
/*
    总结
    1. 看了一些博客，理解了一些思想后，我使用递归AC了这题。
    2. 思路 假如有5个人，
        编号为 0 1 2 3 4，现在从0-m-1报数，报数为m-1的人退出， 假如此时m = 3
            则一轮游戏后，剩下的人的编号为 0 1 3 4，
            我们对其重新编号,由于下一轮开始报数的人为3，我们把它编为0，
            则可以有以下映射关系 0 -> 2，1 -> 3, 3 -> 0, 4 -> 1
            于是这一轮游戏又开始了，
            那么如果下一轮游戏是0被淘汰，我们这一轮应该返回什么呢？答案是3。
            如果下一轮游戏是1被淘汰，我们这一轮应该返回什么呢？答案是4。
            如果下一轮游戏是2被淘汰，我们这一轮应该返回什么呢？答案是0。
            ...
            于是，我们可以得到
            当n > 1, 递归关系式 ysfh(n,m) = (ysfh(n-1,m) + m) %n。   (这里省略了begin参数)
            当n==1时，此时我们返回0就可以了。

*/